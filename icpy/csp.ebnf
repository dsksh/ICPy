@@grammar::Csp


start
    = ('Constants'|'constants') cs:constants 
      ('Variables'|'variables') vs:variables 
      ('Constraints'|'constraints') constrs:constraints 'end' $

    | ('Variables'|'variables') vs:variables 
      ('Constraints'|'constraints') constrs:constraints 'end' $
    ;

constants
    = id:ident '=' v:signed_number ';' constants
    | id:ident '=' v:interval ';' constants
    | id:ident '=' minus:'-' v:interval ';' constants
    | ()
    ;


variables
    = id:ident ind:var_index 'in' dom:interval ';' variables
    | ()
    ;


var_index
    = '[' n:integer ']'
    | ()
    ;


ident
    = /[a-zA-Z][a-zA-Z0-9]*/
    ;


interval
    = '[' inf:signed_number ',' sup:signed_number ']'
    ;

signed_number
    = value:float
    | value:integer
    | value:infinity
    | minus:'-' value:float
    | minus:'-' value:integer
    | minus:'-' value:infinity
    ;


constraints
    = head:inequality ';' rest:constraints
    | ()
    ;

inequality
    = left:expression op:'<'  right:expression
    | left:expression op:'<=' right:expression
    | left:expression op:'>'  right:expression
    | left:expression op:'>=' right:expression
    | left:expression op:'='  right:expression
    ;


expression
    = head:term rest:expr_rest
    ;

expr_rest
    = op:'+' ~ arg:term rest:expr_rest
    | op:'-' ~ arg:term rest:expr_rest
    | ()
    ;


term
    = head:min_expr rest:term_rest
    ;

term_rest
    = op:'*' ~ arg:min_expr rest:term_rest
    | op:'/' ~ arg:min_expr rest:term_rest
    | ()
    ;


min_expr
    = op:'-' ~ arg:min_expr
    | @:pow_expr
    ;


pow_expr
    = base:factor rest:pow_expr_rest
    ;

pow_expr_rest
    = 
      op:'^' ~ arg:factor rest:pow_expr_rest
#      op:'^' ~ arg:integer rest:pow_expr_rest
    | ()
    ;


factor
    = subexpression
    | unary_fun
    | ident_ref
    | const
    ;


subexpression
    = '(' ~ @:expression ')'
    ;


unary_fun
    = name:fun_name '(' arg:expression ')'
    ;

fun_name
    = 'sqrt'
    | 'exp'
    | 'log'
    | 'sin'
    | 'cos'
    | 'tan'
    ;


ident_ref
    = id:ident ind:var_index
    ;


const
    = float
    | integer
    | infinity
    | interval
    ;


integer
    = /\d+/
    ;

float
    = /(((\d*\.\d+)|(\d+\.?))[eE][+-]?\d+|((\d*\.\d+)|(\d+\.)))/
    ;

infinity
    = 'inf'
    ;
